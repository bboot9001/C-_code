!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BTCond	BTCond.cpp	/^BTCond::BTCond()$/;"	f	class:BTCond
BTCond	BTCond.h	/^class BTCond$/;"	c
BTMutex	BTMutex.cpp	/^BTMutex::BTMutex()$/;"	f	class:BTMutex
BTMutex	BTMutex.h	/^class BTMutex$/;"	c
BTTask	BTTask.cpp	/^BTTask::BTTask(void (*fn_ptr)(void*), void* arg) : m_fn_ptr(fn_ptr) , m_arg(arg)$/;"	f	class:BTTask
BTTask	BTTask.h	/^class BTTask$/;"	c
BTThreadPool	BTThreadPool.cpp	/^BTThreadPool::BTThreadPool() : m_pool_size(DEFAULT_POOL_SIZE)$/;"	f	class:BTThreadPool
BTThreadPool	BTThreadPool.cpp	/^BTThreadPool::BTThreadPool(int pool_size) : m_pool_size(pool_size)$/;"	f	class:BTThreadPool
BTThreadPool	BTThreadPool.h	/^class BTThreadPool$/;"	c
CC	Makefile	/^CC = g++$/;"	m
DEFAULT_POOL_SIZE	Global.h	/^const int DEFAULT_POOL_SIZE = 200;$/;"	v
MAX_TASKS	main.cpp	/^const int MAX_TASKS = 200;$/;"	v
SRC	Makefile	/^SRC = $(wildcard *.cpp)$/;"	m
SRC_BIN	Makefile	/^SRC_BIN = target_ThreadPool$/;"	m
SRC_OBJ	Makefile	/^SRC_OBJ = $(SRC:.cpp=.o)$/;"	m
STARTED	Global.h	/^const int STARTED = 0;$/;"	v
STOPPED	Global.h	/^const int STOPPED = 1;$/;"	v
_H_BTCOND_H_	BTCond.h	2;"	d
_H_BTMUTEX_H_	BTMutex.h	2;"	d
_H_BTTASK_H_	BTTask.h	2;"	d
_H_BTTHREADPOOL_H_	BTThreadPool.h	2;"	d
_H_GLOBAL_H_	Global.h	2;"	d
add_task	BTThreadPool.cpp	/^int     BTThreadPool::add_task(BTTask *task)$/;"	f	class:BTThreadPool
broadcast	BTCond.cpp	/^void BTCond::broadcast()$/;"	f	class:BTCond
destroy_threadpool	BTThreadPool.cpp	/^int     BTThreadPool::destroy_threadpool()$/;"	f	class:BTThreadPool
execute_thread	BTThreadPool.cpp	/^void *BTThreadPool::execute_thread()$/;"	f	class:BTThreadPool
get_mutex_ptr	BTMutex.cpp	/^pthread_mutex_t* BTMutex::get_mutex_ptr()$/;"	f	class:BTMutex
hello	main.cpp	/^void hello(void* arg)$/;"	f
initialize_threadpool	BTThreadPool.cpp	/^int     BTThreadPool::initialize_threadpool()$/;"	f	class:BTThreadPool
is_locked	BTMutex.h	/^    volatile bool       is_locked;$/;"	m	class:BTMutex
lock	BTMutex.cpp	/^void BTMutex::lock()$/;"	f	class:BTMutex
m_arg	BTTask.h	/^    void*   m_arg;$/;"	m	class:BTTask
m_bt_cond	BTCond.h	/^    pthread_cond_t      m_bt_cond;$/;"	m	class:BTCond
m_fn_ptr	BTTask.h	/^    void    (*m_fn_ptr)(void* );$/;"	m	class:BTTask
m_lock	BTMutex.h	/^    pthread_mutex_t     m_lock;$/;"	m	class:BTMutex
m_pool_size	BTThreadPool.h	/^    int                         m_pool_size;$/;"	m	class:BTThreadPool
m_pool_state	BTThreadPool.h	/^    volatile int                m_pool_state;$/;"	m	class:BTThreadPool
m_task_cond_var	BTThreadPool.h	/^    BTCond                      m_task_cond_var;$/;"	m	class:BTThreadPool
m_task_mutex	BTThreadPool.h	/^    BTMutex                     m_task_mutex;$/;"	m	class:BTThreadPool
m_tasks	BTThreadPool.h	/^    std::deque<BTTask*>         m_tasks;$/;"	m	class:BTThreadPool
m_threads	BTThreadPool.h	/^    std::vector<pthread_t>      m_threads;$/;"	m	class:BTThreadPool
main	main.cpp	/^int main(int argc, char* argv[])$/;"	f
operator ()	BTTask.cpp	/^void BTTask::operator()()$/;"	f	class:BTTask
run	BTTask.cpp	/^void BTTask::run()$/;"	f	class:BTTask
signal	BTCond.cpp	/^void BTCond::signal()$/;"	f	class:BTCond
start_thread	BTThreadPool.cpp	/^extern "C" void* start_thread(void* arg)$/;"	f
unlock	BTMutex.cpp	/^void BTMutex::unlock()$/;"	f	class:BTMutex
wait	BTCond.cpp	/^void BTCond::wait(pthread_mutex_t* mutex)$/;"	f	class:BTCond
~BTCond	BTCond.cpp	/^BTCond::~BTCond()$/;"	f	class:BTCond
~BTMutex	BTMutex.cpp	/^BTMutex::~BTMutex()$/;"	f	class:BTMutex
~BTTask	BTTask.cpp	/^BTTask::~BTTask()$/;"	f	class:BTTask
~BTThreadPool	BTThreadPool.cpp	/^BTThreadPool::~BTThreadPool()$/;"	f	class:BTThreadPool
